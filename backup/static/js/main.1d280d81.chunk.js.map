{"version":3,"sources":["logo.PNG","../node_modules/react-semantic-ui-datepickers/dist/locales sync /^/.*/.json$","ItemsTable.js","Login.js","Logout.js","Town/AddTown.js","Town/TurnipPrices.js","Town/MyTown.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","ItemsTable","props","useState","column","setColumn","data","setData","filteredData","setFilteredData","direction","setDirection","price","setPrice","searchValue","setSearchValue","confirmingDeletion","setConfirmingDeletion","useEffect","fetch","then","response","json","handleSort","clickedColumn","_","sortBy","reverse","handleDeleteConfirmation","shouldDelete","itemName","newItems","filter","item","name","toLowerCase","handleAddClick","isnum","test","trim","push","Number","Fragment","Grid","stackable","columns","Column","Input","fluid","onChange","value","numberOfMatches","matches","forEach","indexOf","icon","placeholder","length","action","onClick","Button","primary","Icon","Table","sortable","unstackable","Header","Row","HeaderCell","sorted","Body","key","Cell","color","size","Segment","Login","performLogin","userName","localStorage","getItem","clientId","window","location","href","buttonText","onSuccess","profileObj","email","replace","clear","setItem","onFailure","console","log","cookiePolicy","Logout","performLogout","AddTown","fruits","addNewTown","selectedFruit","setSelectedFruit","townName","setTownName","mayorName","setMayorName","Date","createdDate","setCreatedDate","toISOString","width","Label","target","event","Select","options","fruitOptions","i","text","getFruitOptions","v","days","TurnipPrices","town","morningPrices","setMorningPrices","afternoonPrices","setAfternoonPrices","enteredTurnips","setEnteredTurnips","editingPrice","setEditingPrice","editingType","setEditingType","allPrices","turnipPrices","split","filterPrices","prices","p","renderCells","pricesToUse","type","selectable","textAlign","newValue","index","copy","slice","updatePrice","definition","ribbon","d","buyPrice","morningProfits","turnipsOwned","afternoonProfits","renderProfits","mp","turnipPricesString","join","ownerUsername","label","tag","content","labelPosition","defaultValue","MyTown","towns","setTowns","setUserName","un","created","nativeFruit","App","Container","className","Image","src","logo","Tab","menu","pointing","panes","menuItem","render","Pane","attached","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1d280d81.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.1bac332d.PNG\";","var map = {\n\t\"./bg-BG.json\": 340,\n\t\"./ca-ES.json\": 341,\n\t\"./cs-CZ.json\": 342,\n\t\"./de-DE.json\": 343,\n\t\"./en-US.json\": 174,\n\t\"./es-ES.json\": 344,\n\t\"./fi-FI.json\": 345,\n\t\"./fr-FR.json\": 346,\n\t\"./he-IL.json\": 347,\n\t\"./it-IT.json\": 348,\n\t\"./ja-JP.json\": 349,\n\t\"./no-NB.json\": 350,\n\t\"./pl-PL.json\": 351,\n\t\"./pt-BR.json\": 352,\n\t\"./ru-RU.json\": 353,\n\t\"./sv-SE.json\": 354,\n\t\"./tr-TR.json\": 355,\n\t\"./zh-CN.json\": 356\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 339;","import React, { useState, useEffect } from 'react'\r\nimport { Table, Input, Button, Grid, Icon, Segment } from 'semantic-ui-react'\r\nimport _ from 'lodash';\r\n\r\nconst ItemsTable = props => {\r\n    const [column, setColumn] = useState(null);\r\n    const [data, setData] = useState(null);\r\n    const [filteredData, setFilteredData] = useState(null);\r\n    const [direction, setDirection] = useState(null);\r\n    const [price, setPrice] = useState('');\r\n    const [searchValue, setSearchValue] = useState('');\r\n    const [confirmingDeletion, setConfirmingDeletion] = useState(false);\r\n\r\n    const fetchData = () => {\r\n        fetch('https://acnlapi.azurewebsites.net/api/itemprices/get')\r\n        .then(response => response.json())\r\n        .then((data) => {\r\n            setData(data);\r\n            setFilteredData(data);\r\n        }\r\n        );\r\n    }\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, []);\r\n    const handleSort = (clickedColumn) => {\r\n        if (column !== clickedColumn) {\r\n            setColumn(clickedColumn);\r\n            setFilteredData(_.sortBy(filteredData, [clickedColumn]));\r\n            setDirection('ascending');\r\n            return;\r\n        };\r\n        setFilteredData(filteredData.reverse());\r\n        setDirection(direction === 'ascending' ? 'descending' : 'ascending');\r\n    };\r\n\r\n    const handleSearchChange = (e, { value }) => {\r\n        setSearchValue(value);\r\n        if (!value) setFilteredData(data);\r\n        let numberOfMatches = 0;\r\n        let matches = [];\r\n        data.forEach(item => {\r\n            if (item.name.indexOf(value.toLowerCase()) > - 1) {\r\n                numberOfMatches += 1;\r\n                matches.push(item);\r\n                if (numberOfMatches >= 10) {\r\n                    setFilteredData(matches);\r\n                    return;\r\n                }\r\n            }\r\n        })\r\n        setFilteredData(matches);\r\n    }\r\n    const handlePriceChange = (e, { value }) => {\r\n        if (!value) {\r\n            setPrice('');\r\n            return;\r\n        }\r\n        var isnum = /^\\d+$/.test(value);\r\n        if (!isnum) {\r\n            return;\r\n        }\r\n        setPrice(value);\r\n    }\r\n\r\n    const handleDeleteConfirmation = (shouldDelete, itemName) => {\r\n        setConfirmingDeletion(false);\r\n        if(shouldDelete){\r\n            fetch(`https://acnlapi.azurewebsites.net/api/itemprices/delete?itemName=${itemName}`)\r\n            let newItems = data.filter(item => item.name !== itemName.toLowerCase())\r\n            setData(newItems);\r\n            setFilteredData(newItems);\r\n            setSearchValue('');\r\n            setPrice('');\r\n        }       \r\n    }\r\n\r\n    const handleAddClick = () => {\r\n        var isnum = /^\\d+$/.test(price);\r\n        if (price && searchValue && isnum) {\r\n        fetch(`https://acnlapi.azurewebsites.net/api/itemprices/add?itemName=${searchValue.toLowerCase().trim()}&price=${price.trim()}`)\r\n        var newItems = [...data];\r\n        newItems.push({ name: searchValue.toLowerCase().trim(), price: Number(price) });\r\n        setData(newItems);\r\n        setFilteredData(newItems);\r\n        setSearchValue('');\r\n        setPrice('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Grid stackable columns={2}>\r\n                    <Grid.Column >\r\n                        <Input\r\n                            fluid\r\n\r\n                            onChange={handleSearchChange}\r\n                            icon={{ name: 'search' }}\r\n                            placeholder='search'\r\n                            value={searchValue}\r\n                        />\r\n                    </Grid.Column>\r\n                    {filteredData && filteredData.length < 4 &&\r\n                        <React.Fragment>\r\n                            <Grid.Column >\r\n                                <Input\r\n                                    fluid\r\n                                    onChange={handlePriceChange}\r\n                                    value={price}\r\n                                    placeholder='enter price'\r\n                                    action\r\n                                    onClick={handleAddClick}\r\n                                >\r\n                                    <input />\r\n                                    <Button primary icon onClick={handleAddClick}><Icon name='plus' /></Button>\r\n\r\n                                    </Input>\r\n\r\n                                \r\n                            </Grid.Column>\r\n                        </React.Fragment>\r\n                    }\r\n            </Grid>\r\n\r\n\r\n            {filteredData && filteredData.length > 0 &&\r\n                <Table sortable unstackable>\r\n                    <Table.Header>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell\r\n                                sorted={column === 'name' ? direction : null}\r\n                                onClick={() => handleSort('name')}\r\n                            >\r\n                                Name\r\n                    </Table.HeaderCell>\r\n                            <Table.HeaderCell\r\n                                sorted={column === 'price' ? direction : null}\r\n                                onClick={() => handleSort('price')}\r\n                            >\r\n                                Price\r\n                    </Table.HeaderCell>\r\n                            <Table.HeaderCell\r\n                            >\r\n                                Actions\r\n                    </Table.HeaderCell>\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n                    <Table.Body>\r\n                        {_.map(filteredData, ({ price, name }) => (\r\n                            <Table.Row key={name}>\r\n                                <Table.Cell>{name}</Table.Cell>\r\n                                <Table.Cell>{Number(price)}</Table.Cell>\r\n                                {!confirmingDeletion && \r\n                                    <Table.Cell><Button color='red' size='tiny' icon onClick={() => setConfirmingDeletion(true)}> <Icon name='trash' /></Button></Table.Cell>\r\n                                }\r\n                                {confirmingDeletion &&\r\n                                <Table.Cell>\r\n                                    <Button color='red' size='tiny' icon onClick={() => handleDeleteConfirmation(false, name)}> <Icon name='cancel' /></Button>\r\n                                    <Button color='green' size='tiny' icon onClick={() => handleDeleteConfirmation(true, name)}> <Icon name='checkmark' /></Button>\r\n                                    </Table.Cell>\r\n                                }\r\n                            </Table.Row>\r\n                        ))}\r\n                    </Table.Body>\r\n                </Table>\r\n            }\r\n            {filteredData && filteredData.length < 4 &&\r\n            \r\n            <Segment>\r\n                <div>Don't see what you're looking for? Double check your spelling and then add a price!</div>\r\n                </Segment>\r\n            }\r\n\r\n\r\n</React.Fragment>\r\n\r\n    )\r\n}\r\nexport default ItemsTable;","import { GoogleLogin } from 'react-google-login';\r\nimport React, { useEffect } from 'react';\r\n\r\nconst Login = props => {\r\n    const { performLogin } = props;\r\n\r\n    useEffect(() => {\r\n        let userName = localStorage.getItem('userName');\r\n        if(userName) performLogin(userName);\r\n    });\r\n\r\n    const responseGoogle = (response) => {\r\n        console.log(response);\r\n    }\r\n\r\n    const success = (response) => {\r\n        let email = response.profileObj.email;\r\n        let userName = email.replace('@', '');\r\n        performLogin(userName)\r\n        localStorage.clear();\r\n        localStorage.setItem('userName', userName);\r\n    }\r\n\r\n    const getClientId = () => {\r\n        if (window.location.href.indexOf(\"localhost\") > -1) {\r\n            return \"296712442440-7ucpq9fvi7942h3pbf4ue59jtfl5119g.apps.googleusercontent.com\";\r\n        }\r\n        return \"296712442440-c4379tsukpnco35rr57d4as5uslqg0gl.apps.googleusercontent.com\"\r\n    }\r\n    return (\r\n        <GoogleLogin\r\n            clientId={getClientId()}\r\n            buttonText=\"Login\"\r\n            onSuccess={success}\r\n            onFailure={responseGoogle}\r\n            cookiePolicy={'single_host_origin'}\r\n        />\r\n    );\r\n}\r\nexport default Login;","import { Button } from 'semantic-ui-react'\r\nimport React from 'react'\r\n\r\nconst Logout = props => {\r\n    const { performLogout } = props;\r\n\r\n    const onClick = () => {\r\n        performLogout();\r\n        localStorage.clear();\r\n    }\r\n\r\n    return (\r\n        <Button onClick={onClick}>\r\n            Logout\r\n        </Button>\r\n    );\r\n}\r\nexport default Logout;","import React, { useState, useEffect } from 'react';\r\nimport { Select, Input, Grid, Button, Label } from 'semantic-ui-react'\r\nimport SemanticDatepicker from 'react-semantic-ui-datepickers';\r\nimport 'react-semantic-ui-datepickers/dist/react-semantic-ui-datepickers.css';\r\n\r\n\r\nconst AddTown = props => {\r\n    const { fruits, userName, addNewTown } = props;\r\n    const [selectedFruit, setSelectedFruit] = useState(null);\r\n    const [townName, setTownName] = useState('');\r\n    const [mayorName, setMayorName] = useState('');\r\n    const [createdDate, setCreatedDate] = useState(new Date());\r\n    const onChange = (event, data) => setCreatedDate(data.value);\r\n\r\n    const getFruitOptions = () => {\r\n        let fruitOptions = [];\r\n        for (let i = 0; i < fruits.length; i++) {\r\n            fruitOptions.push({ key: i, value: i, text: fruits[i] });\r\n        }\r\n        return fruitOptions;\r\n    }\r\n    const AddTown = () => {\r\n        fetch(`https://acnlapi.azurewebsites.net/api/town/add?userName=${userName}&townName=${townName}&mayorName=${mayorName}&createdDate=${createdDate.toISOString()}&nativeFruit=${selectedFruit}`)\r\n            .then(response => response.json())\r\n            .then((data) => {\r\n                addNewTown([data]);\r\n            }\r\n            );\r\n\r\n    }\r\n    return (\r\n        <Grid stackable columns={2}>\r\n            <Grid.Row>\r\n                <Grid.Column width={8}>\r\n                    <span>A Town wasn't found for your account, please add one!</span>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n                <Grid.Column>\r\n                    <Label size=\"large\">Town Name</Label>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                    <Input\r\n                        onChange={(e) => setTownName(e.target.value)}\r\n                    />\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n                <Grid.Column>\r\n                    <Label size=\"large\">Mayor Name</Label>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                    <Input\r\n                        onChange={(e) => setMayorName(e.target.value)}\r\n                    />\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n                <Grid.Column>\r\n                    <Label size=\"large\">Created Date</Label>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                    <SemanticDatepicker\r\n                        onChange={onChange} />\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n                <Grid.Column>\r\n                    <Label size=\"large\">Native Fruit</Label>\r\n                </Grid.Column>\r\n\r\n                <Grid.Column>\r\n                    <Select\r\n                        placeholder='Select your fruit'\r\n                        options={getFruitOptions()}\r\n                        onChange={(e, v) => setSelectedFruit(v.value)}\r\n                    />\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n                <Grid.Column>\r\n                    <Button onClick={AddTown} primary>Save</Button>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n        </Grid>\r\n    );\r\n}\r\nexport default AddTown;","import React, { useState, useEffect } from 'react';\r\nimport { Button, Label, Table, Input } from 'semantic-ui-react'\r\nimport _ from 'lodash';\r\n\r\nconst days = ['Sunday(Buy)', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n\r\nconst TurnipPrices = props => {\r\n    const { town } = props;\r\n    const [morningPrices, setMorningPrices] = useState([]);\r\n    const [afternoonPrices, setAfternoonPrices] = useState([]);\r\n    const [enteredTurnips, setEnteredTurnips] = useState(0);\r\n    const [editingPrice, setEditingPrice] = useState(-1);\r\n    const [editingType, setEditingType] = useState(-1);\r\n\r\n    useEffect(() => {\r\n        if (town) {\r\n            let allPrices = town.turnipPrices.split('.');\r\n            filterPrices(allPrices);\r\n        }\r\n    }, [town]);\r\n\r\n    const filterPrices = (prices) => {\r\n        setMorningPrices(prices.filter((p, i) => {\r\n            return i % 2 === 0;\r\n        }));\r\n        setAfternoonPrices(prices.filter((p, i) => {\r\n            return i % 2 === 1;\r\n        }));\r\n    }\r\n\r\n    const updateTurnipPrices = () => {\r\n        setEditingType(-1);\r\n        setEditingPrice(-1);\r\n        debugger;\r\n        let allPrices = [];\r\n        morningPrices.forEach((mp, i) => {\r\n            allPrices.push(mp);\r\n            allPrices.push(afternoonPrices[i]);\r\n        })\r\n        let turnipPricesString = allPrices.join(\".\");\r\n\r\n        fetch(`https://acnlapi.azurewebsites.net/api/town/UpdateTurnips?userName=${town.ownerUsername}&townName=${town.name}&turnipPrices=${turnipPricesString}&quantity=${enteredTurnips}`)\r\n            .then(response => response.json())\r\n            .then((data) => {\r\n                debugger;\r\n                let allPrices = data.turnipPrices.split('.');\r\n                filterPrices(allPrices);\r\n            }\r\n            );\r\n    }\r\n\r\n    const clickEditableCell = (cellType, index) => {\r\n        setEditingType(cellType)\r\n        setEditingPrice(index);\r\n    }\r\n\r\n    const updatePrice = (pricesToUse, newValue, index, type) => {\r\n        var copy = pricesToUse.slice();\r\n        copy[index] = newValue;\r\n        if (type === 0) {\r\n            setMorningPrices(copy);\r\n        }\r\n        else {\r\n            setAfternoonPrices(copy);\r\n        }\r\n    }\r\n\r\n    const renderCells = (pricesToUse, type) => {\r\n        return pricesToUse.map((p, i) => {\r\n            if (editingPrice === i && type === editingType) {\r\n                return (\r\n\r\n                    <Table.Cell selectable textAlign='center'>\r\n                        <Input\r\n                            onChange={(e) => updatePrice(pricesToUse, e.target.value, i, type)}\r\n                        />\r\n                    </Table.Cell>\r\n                )\r\n            }\r\n            else {\r\n\r\n                return (\r\n                    <Table.Cell selectable textAlign='center' onClick={() => clickEditableCell(type, i)}>{p}</Table.Cell>\r\n                );\r\n            }\r\n        })\r\n    }\r\n    const renderProfits = () => {\r\n        let buyPrice = morningPrices[0];\r\n        let morningProfits = morningPrices.map((p, i) => {\r\n            if (i === 0) return i;\r\n            return (town.turnipsOwned * p) - (town.turnipsOwned * buyPrice);\r\n        })\r\n        let afternoonProfits = afternoonPrices.map((p, i) => {\r\n            if (i === 0) return i;\r\n            return (town.turnipsOwned * p) - (town.turnipsOwned * buyPrice);\r\n        })\r\n        let maximumProfits = [0, 0, 0, 0, 0, 0, 0].map((p, i) => {\r\n            return morningProfits[i] > afternoonProfits[i] ? morningProfits[i] : afternoonProfits[i];\r\n        })\r\n\r\n        return maximumProfits.map((p, i) => {\r\n            if(i !== 0){\r\n                return (\r\n                    <Table.Cell textAlign='center' >{p}</Table.Cell>\r\n                );\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Table definition unstackable>\r\n                <Table.Header>\r\n                    <Table.Row>\r\n                        <Table.Cell><Label ribbon color='red'>Turnips</Label></Table.Cell>\r\n                        {_.map(days, (d) => (\r\n                            <Table.HeaderCell>{d}</Table.HeaderCell>\r\n                        ))}\r\n                    </Table.Row>\r\n                </Table.Header>\r\n\r\n                <Table.Body>\r\n                    <Table.Row>\r\n                        <Table.Cell>Morning</Table.Cell>\r\n                        {renderCells(morningPrices, 0)}\r\n                    </Table.Row>\r\n                    <Table.Row>\r\n                        <Table.Cell>Afternoon</Table.Cell>\r\n                        {renderCells(afternoonPrices, 1)}\r\n                    </Table.Row>\r\n                    <Table.Row>\r\n                        <Table.Cell>Potential Profits</Table.Cell>\r\n                        <Table.Cell textAlign='center'>N/A</Table.Cell>\r\n                        {renderProfits()}\r\n                    </Table.Row>\r\n                </Table.Body>\r\n            </Table>\r\n            <Button\r\n                primary\r\n                size='large'\r\n                onClick={updateTurnipPrices}\r\n            >\r\n                Save\r\n          </Button>\r\n            <Input\r\n                label={{ tag: true, content: 'Add Turnips', color: 'red' }}\r\n                labelPosition='right'\r\n                placeholder='Quantity...'\r\n                defaultValue={enteredTurnips}\r\n                onChange={(e) =>  setEnteredTurnips(e.target.value)}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n}\r\nexport default TurnipPrices;","import React, { useState, useEffect } from 'react';\r\nimport Login from '../Login';\r\nimport Logout from '../Logout';\r\nimport AddTown from './AddTown';\r\nimport TurnipPrices from './TurnipPrices';\r\n\r\n\r\nconst fruits = [\"Apples\", \"Cherries\", \"Oranges\", \"Peaches\", \"Pears\"];\r\n\r\nconst MyTown = props => {\r\n    const [towns, setTowns] = useState([]);\r\n    const [userName, setUserName] = useState(null);\r\n\r\n    useEffect(() => {\r\n        fetch(`https://acnlapi.azurewebsites.net/api/town/get?userName=${userName}`)\r\n        .then(response => response.json())\r\n        .then((data) => {\r\n            setTowns(data);\r\n        }\r\n        );\r\n    }, [userName]);\r\n\r\n\r\n    const renderTowns = () => {\r\n        if(userName && towns && towns.length > 0) {\r\n            return (\r\n                <React.Fragment>\r\n                <ul>\r\n                    <li>Town {towns[0].name}</li>\r\n                    <li>Mayor {towns[0].mayorName}</li>\r\n                    <li>Created {towns[0].created}</li>\r\n                    <li>Fruit {fruits[towns[0].nativeFruit]}</li>\r\n                    <li>Turnips Owned: {towns[0].turnipsOwned}</li>\r\n                </ul>\r\n                <TurnipPrices town={towns[0]} />\r\n                </React.Fragment>\r\n            )\r\n        }\r\n        if(userName && (!towns || towns.length === 0)) {\r\n            return <AddTown fruits={fruits} userName={userName} addNewTown={(towns) => setTowns(towns)}/>\r\n        }\r\n        return  <React.Fragment></React.Fragment>\r\n    }\r\n    \r\n    const renderLogin = () => {\r\n        if(userName){\r\n            return <Logout performLogout={() => setUserName(null)} />\r\n        }\r\n        else {\r\n            return <Login performLogin={(un) => setUserName(un)} />\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {renderLogin()}\r\n            {renderTowns()}            \r\n        </div>\r\n    );\r\n}\r\nexport default MyTown;","import React from 'react'\nimport ItemsTable from './ItemsTable';\nimport MyTown from './Town/MyTown';\nimport { Container, Image, Tab } from 'semantic-ui-react'\nimport './App.css';\nimport logo from './logo.PNG';\n\n\nconst App = props =>{\n\n\n  const GetPanes = () => {\n    return [\n    {\n      menuItem: 'Prices',\n      render: () => <Tab.Pane attached={false}><ItemsTable/></Tab.Pane>,\n    },\n    {\n      menuItem: 'My Town',\n      render: () => <Tab.Pane attached={false}><MyTown/></Tab.Pane>,\n    }]\n  }\n  return (\n    <Container className=\"container\">\n      <Image className=\"logo\" src={logo} />\n      <Tab menu={{ pointing: true }} panes={GetPanes()} />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}