{"version":3,"sources":["logo.PNG","ItemsTable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ItemsTable","props","useState","column","setColumn","data","setData","filteredData","setFilteredData","direction","setDirection","price","setPrice","searchValue","setSearchValue","confirmingDeletion","setConfirmingDeletion","useEffect","fetch","then","response","json","handleSort","clickedColumn","_","sortBy","reverse","handleDeleteConfirmation","shouldDelete","itemName","newItems","filter","item","name","toLowerCase","handleAddClick","isnum","test","trim","push","Number","Fragment","Grid","stackable","columns","Column","Input","fluid","onChange","e","value","numberOfMatches","matches","forEach","indexOf","icon","placeholder","length","action","onClick","Button","primary","Icon","Table","sortable","unstackable","color","inverted","Header","Row","HeaderCell","sorted","Body","map","key","Cell","size","Segment","App","Container","className","Image","src","logo","Divider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iGAAAA,EAAOC,QAAU,IAA0B,kC,+PCqL5BC,EAjLI,SAAAC,GAAU,IAAD,EACIC,mBAAS,MADb,mBACjBC,EADiB,KACTC,EADS,OAEAF,mBAAS,MAFT,mBAEjBG,EAFiB,KAEXC,EAFW,OAGgBJ,mBAAS,MAHzB,mBAGjBK,EAHiB,KAGHC,EAHG,OAIUN,mBAAS,MAJnB,mBAIjBO,EAJiB,KAINC,EAJM,OAKER,mBAAS,IALX,mBAKjBS,EALiB,KAKVC,EALU,OAMcV,mBAAS,IANvB,mBAMjBW,EANiB,KAMJC,EANI,OAO4BZ,oBAAS,GAPrC,mBAOjBa,EAPiB,KAOGC,EAPH,KAoBxBC,qBAAU,WARNC,MAAM,gEACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACd,GACHC,EAAQD,GACRG,EAAgBH,QAMrB,IACH,IAAMiB,EAAa,SAACC,GAChB,GAAIpB,IAAWoB,EAIX,OAHAnB,EAAUmB,GACVf,EAAgBgB,IAAEC,OAAOlB,EAAc,CAACgB,UACxCb,EAAa,aAGjBF,EAAgBD,EAAamB,WAC7BhB,EAA2B,cAAdD,EAA4B,aAAe,cAgCtDkB,EAA2B,SAACC,EAAcC,GAE5C,GADAb,GAAsB,GACnBY,EAAa,CACZV,MAAM,oEAAD,OAAqEW,IAC1E,IAAIC,EAAWzB,EAAK0B,QAAO,SAAAC,GAAI,OAAIA,EAAKC,OAASJ,EAASK,iBAC1D5B,EAAQwB,GACRtB,EAAgBsB,GAChBhB,EAAe,IACfF,EAAS,MAIXuB,EAAiB,WACnB,IAAIC,EAAQ,QAAQC,KAAK1B,GACzB,GAAIA,GAASE,GAAeuB,EAAO,CACnClB,MAAM,iEAAD,OAAkEL,EAAYqB,cAAcI,OAA5F,kBAA4G3B,EAAM2B,SACvH,IAAIR,EAAQ,YAAOzB,GACnByB,EAASS,KAAK,CAAEN,KAAMpB,EAAYqB,cAAcI,OAAQ3B,MAAO6B,OAAO7B,KACtEL,EAAQwB,GACRtB,EAAgBsB,GAChBhB,EAAe,IACfF,EAAS,MAIb,OACI,kBAAC,IAAM6B,SAAP,KACI,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACjB,kBAACF,EAAA,EAAKG,OAAN,KACI,kBAACC,EAAA,EAAD,CACIC,OAAK,EAELC,SA7DG,SAACC,EAAD,GAAmB,IAAbC,EAAY,EAAZA,MAC7BpC,EAAeoC,GACVA,GAAO1C,EAAgBH,GAC5B,IAAI8C,EAAkB,EAClBC,EAAU,GACd/C,EAAKgD,SAAQ,SAAArB,GACLA,EAAKC,KAAKqB,QAAQJ,EAAMhB,gBAAmB,IAC3CiB,GAAmB,EACnBC,EAAQb,KAAKP,GACTmB,GAAmB,KACnB3C,EAAgB4C,MAK5B5C,EAAgB4C,IA+CIG,KAAM,CAAEtB,KAAM,UACduB,YAAY,SACZN,MAAOrC,KAGdN,GAAgBA,EAAakD,OAAS,GACnC,kBAAC,IAAMhB,SAAP,KACI,kBAACC,EAAA,EAAKG,OAAN,KACI,kBAACC,EAAA,EAAD,CACIC,OAAK,EACLC,SAvDN,SAACC,EAAD,GAAmB,IAAbC,EAAY,EAAZA,MACvBA,EAIO,QAAQb,KAAKa,IAIzBtC,EAASsC,GAPLtC,EAAS,KAsDesC,MAAOvC,EACP6C,YAAY,cACZE,QAAM,EACNC,QAASxB,GAET,gCACA,kBAACyB,EAAA,EAAD,CAAQC,SAAO,EAACN,MAAI,EAACI,QAASxB,GAAgB,kBAAC2B,EAAA,EAAD,CAAM7B,KAAK,cAWhF1B,GAAgBA,EAAakD,OAAS,GACnC,kBAACM,EAAA,EAAD,CAAOC,UAAQ,EAACC,aAAW,EAACC,MAAO,OAAQC,UAAQ,GAC/C,kBAACJ,EAAA,EAAMK,OAAP,KACI,kBAACL,EAAA,EAAMM,IAAP,KACI,kBAACN,EAAA,EAAMO,WAAP,CACIC,OAAmB,SAAXpE,EAAoBM,EAAY,KACxCkD,QAAS,kBAAMrC,EAAW,UAF9B,QAMA,kBAACyC,EAAA,EAAMO,WAAP,CACIC,OAAmB,UAAXpE,EAAqBM,EAAY,KACzCkD,QAAS,kBAAMrC,EAAW,WAF9B,SAMA,kBAACyC,EAAA,EAAMO,WAAP,kBAMR,kBAACP,EAAA,EAAMS,KAAP,KACKhD,IAAEiD,IAAIlE,GAAc,gBAAGI,EAAH,EAAGA,MAAOsB,EAAV,EAAUA,KAAV,OACjB,kBAAC8B,EAAA,EAAMM,IAAP,CAAWK,IAAKzC,GACZ,kBAAC8B,EAAA,EAAMY,KAAP,KAAa1C,GACb,kBAAC8B,EAAA,EAAMY,KAAP,KAAanC,OAAO7B,KAClBI,GACE,kBAACgD,EAAA,EAAMY,KAAP,KAAY,kBAACf,EAAA,EAAD,CAAQM,MAAM,MAAMU,KAAK,OAAOrB,MAAI,EAACI,QAAS,kBAAM3C,GAAsB,KAA1E,IAAkF,kBAAC8C,EAAA,EAAD,CAAM7B,KAAK,YAE5GlB,GACD,kBAACgD,EAAA,EAAMY,KAAP,KACI,kBAACf,EAAA,EAAD,CAAQM,MAAM,MAAMU,KAAK,OAAOrB,MAAI,EAACI,QAAS,kBAAMhC,GAAyB,EAAOM,KAApF,IAA4F,kBAAC6B,EAAA,EAAD,CAAM7B,KAAK,YACvG,kBAAC2B,EAAA,EAAD,CAAQM,MAAM,QAAQU,KAAK,OAAOrB,MAAI,EAACI,QAAS,kBAAMhC,GAAyB,EAAMM,KAArF,IAA6F,kBAAC6B,EAAA,EAAD,CAAM7B,KAAK,sBAQ/H1B,GAAgBA,EAAakD,OAAS,GAEvC,kBAACoB,EAAA,EAAD,KACI,uH,+DC1JDC,MAXf,WACE,OACE,kBAACC,EAAA,EAAD,CAAWC,UAAU,aACnB,kBAACC,EAAA,EAAD,CAAOD,UAAU,OAAOE,IAAKC,MAE/B,kBAACC,EAAA,EAAD,MACI,kBAAC,EAAD,QCDYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9E,MAAK,SAAA+E,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7935f099.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f4f6d19b.PNG\";","import React, { useState, useEffect } from 'react'\r\nimport { Table, Input, Button, Grid, Icon, Segment } from 'semantic-ui-react'\r\nimport _ from 'lodash';\r\n\r\nconst ItemsTable = props => {\r\n    const [column, setColumn] = useState(null);\r\n    const [data, setData] = useState(null);\r\n    const [filteredData, setFilteredData] = useState(null);\r\n    const [direction, setDirection] = useState(null);\r\n    const [price, setPrice] = useState('');\r\n    const [searchValue, setSearchValue] = useState('');\r\n    const [confirmingDeletion, setConfirmingDeletion] = useState(false);\r\n\r\n\r\n\r\n    const fetchData = () => {\r\n        fetch('https://acnlapi.azurewebsites.net/api/itemprices/getallitems')\r\n        .then(response => response.json())\r\n        .then((data) => {\r\n            setData(data);\r\n            setFilteredData(data);\r\n        }\r\n        );\r\n    }\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, []);\r\n    const handleSort = (clickedColumn) => {\r\n        if (column !== clickedColumn) {\r\n            setColumn(clickedColumn);\r\n            setFilteredData(_.sortBy(filteredData, [clickedColumn]));\r\n            setDirection('ascending');\r\n            return;\r\n        };\r\n        setFilteredData(filteredData.reverse());\r\n        setDirection(direction === 'ascending' ? 'descending' : 'ascending');\r\n    };\r\n\r\n    const handleSearchChange = (e, { value }) => {\r\n        setSearchValue(value);\r\n        if (!value) setFilteredData(data);\r\n        let numberOfMatches = 0;\r\n        let matches = [];\r\n        data.forEach(item => {\r\n            if (item.name.indexOf(value.toLowerCase()) > - 1) {\r\n                numberOfMatches += 1;\r\n                matches.push(item);\r\n                if (numberOfMatches >= 10) {\r\n                    setFilteredData(matches);\r\n                    return;\r\n                }\r\n            }\r\n        })\r\n        setFilteredData(matches);\r\n    }\r\n    const handlePriceChange = (e, { value }) => {\r\n        if (!value) {\r\n            setPrice('');\r\n            return;\r\n        }\r\n        var isnum = /^\\d+$/.test(value);\r\n        if (!isnum) {\r\n            return;\r\n        }\r\n        setPrice(value);\r\n    }\r\n\r\n    const handleDeleteConfirmation = (shouldDelete, itemName) => {\r\n        setConfirmingDeletion(false);\r\n        if(shouldDelete){\r\n            fetch(`https://acnlapi.azurewebsites.net/api/itemprices/delete?itemName=${itemName}`)\r\n            let newItems = data.filter(item => item.name !== itemName.toLowerCase())\r\n            setData(newItems);\r\n            setFilteredData(newItems);\r\n            setSearchValue('');\r\n            setPrice('');\r\n        }       \r\n    }\r\n\r\n    const handleAddClick = () => {\r\n        var isnum = /^\\d+$/.test(price);\r\n        if (price && searchValue && isnum) {\r\n        fetch(`https://acnlapi.azurewebsites.net/api/itemprices/add?itemName=${searchValue.toLowerCase().trim()}&price=${price.trim()}`)\r\n        var newItems = [...data];\r\n        newItems.push({ name: searchValue.toLowerCase().trim(), price: Number(price) });\r\n        setData(newItems);\r\n        setFilteredData(newItems);\r\n        setSearchValue('');\r\n        setPrice('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Grid stackable columns={2}>\r\n                    <Grid.Column >\r\n                        <Input\r\n                            fluid\r\n\r\n                            onChange={handleSearchChange}\r\n                            icon={{ name: 'search' }}\r\n                            placeholder='search'\r\n                            value={searchValue}\r\n                        />\r\n                    </Grid.Column>\r\n                    {filteredData && filteredData.length < 4 &&\r\n                        <React.Fragment>\r\n                            <Grid.Column >\r\n                                <Input\r\n                                    fluid\r\n                                    onChange={handlePriceChange}\r\n                                    value={price}\r\n                                    placeholder='enter price'\r\n                                    action\r\n                                    onClick={handleAddClick}\r\n                                >\r\n                                    <input />\r\n                                    <Button primary icon onClick={handleAddClick}><Icon name='plus' /></Button>\r\n\r\n                                    </Input>\r\n\r\n                                \r\n                            </Grid.Column>\r\n                        </React.Fragment>\r\n                    }\r\n            </Grid>\r\n\r\n\r\n            {filteredData && filteredData.length > 0 &&\r\n                <Table sortable unstackable color={'grey'} inverted>\r\n                    <Table.Header>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell\r\n                                sorted={column === 'name' ? direction : null}\r\n                                onClick={() => handleSort('name')}\r\n                            >\r\n                                Name\r\n                    </Table.HeaderCell>\r\n                            <Table.HeaderCell\r\n                                sorted={column === 'price' ? direction : null}\r\n                                onClick={() => handleSort('price')}\r\n                            >\r\n                                Price\r\n                    </Table.HeaderCell>\r\n                            <Table.HeaderCell\r\n                            >\r\n                                Actions\r\n                    </Table.HeaderCell>\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n                    <Table.Body>\r\n                        {_.map(filteredData, ({ price, name }) => (\r\n                            <Table.Row key={name}>\r\n                                <Table.Cell>{name}</Table.Cell>\r\n                                <Table.Cell>{Number(price)}</Table.Cell>\r\n                                {!confirmingDeletion && \r\n                                    <Table.Cell><Button color='red' size='tiny' icon onClick={() => setConfirmingDeletion(true)}> <Icon name='trash' /></Button></Table.Cell>\r\n                                }\r\n                                {confirmingDeletion &&\r\n                                <Table.Cell>\r\n                                    <Button color='red' size='tiny' icon onClick={() => handleDeleteConfirmation(false, name)}> <Icon name='cancel' /></Button>\r\n                                    <Button color='green' size='tiny' icon onClick={() => handleDeleteConfirmation(true, name)}> <Icon name='checkmark' /></Button>\r\n                                    </Table.Cell>\r\n                                }\r\n                            </Table.Row>\r\n                        ))}\r\n                    </Table.Body>\r\n                </Table>\r\n            }\r\n            {filteredData && filteredData.length < 4 &&\r\n            \r\n            <Segment>\r\n                <div>Don't see what you're looking for? Double check your spelling and then add a price!</div>\r\n                </Segment>\r\n            }\r\n\r\n\r\n</React.Fragment>\r\n\r\n    )\r\n}\r\nexport default ItemsTable;","import React from 'react';\nimport ItemsTable from './ItemsTable';\nimport Login from './Login';\nimport { Container, Image, Divider } from 'semantic-ui-react'\nimport './App.css';\nimport logo from './logo.PNG';\n\nfunction App() {\n  return (\n    <Container className=\"container\">\n      <Image className=\"logo\" src={logo} />\n      {/* <Login /> */}\n    <Divider />\n        <ItemsTable/>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}