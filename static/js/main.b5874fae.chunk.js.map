{"version":3,"sources":["Leaderboard.js","ServerStatus.js","App.js","reportWebVitals.js","index.js"],"names":["Leaderboard","useState","undefined","leaderboardRecords","setLeaderboardRecords","loading","setLoading","useEffect","fetch","then","res","json","data","columns","field","headerName","width","valueGetter","params","deaths","getValue","Number","toFixed","Container","Header","as","className","rows","players","map","player","push","id","name","kills","points","getRows","sortModel","sort","autoPageSize","Dimmer","active","Loader","inverted","ServerStatus","serverInfo","setServerInfo","playerList","setPlayerList","fetchServerData","Table","celled","Row","HeaderCell","Body","p","kda","split","Cell","App","Drawer","variant","anchor","List","ListItem","button","to","ListItemText","primary","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b5874fae.chunk.js","sourcesContent":["import React, { useState, useEffect, } from 'react';\r\nimport { Container, Dimmer, Loader, Header } from 'semantic-ui-react'\r\nimport { DataGrid } from '@material-ui/data-grid';\r\n\r\nfunction Leaderboard() {\r\n    const [leaderboardRecords, setLeaderboardRecords] = useState(undefined);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        fetch('https://pavlov-web-scoreboard.herokuapp.com/api/leaderboard/get').then(res => res.json())\r\n            .then(data => {\r\n                setLeaderboardRecords(data);\r\n                setLoading(false);\r\n            });\r\n    }, []);\r\n\r\n    const getRows = () => {\r\n        let players = []\r\n        leaderboardRecords.map(player => {\r\n            players.push({\r\n                id: player[\"steamId\"],\r\n                name: player[\"name\"],\r\n                kills: player[\"kills\"],\r\n                deaths: player[\"deaths\"],\r\n                points: player[\"points\"]\r\n            });\r\n        })\r\n        return players;\r\n    }\r\n\r\n    const columns = [\r\n        { field: 'name', headerName: 'Player', width: 300 },\r\n        { field: 'kills', headerName: 'Kills', width: 200 },\r\n        { field: 'deaths', headerName: 'Deaths', width: 200 },\r\n        { field: 'points', headerName: 'Points', width: 200 },\r\n        { field: 'ratio', headerName: 'K/D', width: 200, \r\n        valueGetter: (params) =>  {\r\n            let deaths = params.getValue('deaths');\r\n            if(Number(deaths) === 0) deaths = 1\r\n            return `${(params.getValue('kills') / deaths).toFixed(2)}`\r\n        } },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <Header as='h2' className=\"leaderboard-header\">Preseason Leaderboard</Header>\r\n            {leaderboardRecords && !loading &&\r\n                <div className=\"leaderboard\">\r\n                    <DataGrid\r\n                        rows={getRows()}\r\n                        columns={columns}\r\n                        sortModel={[\r\n                            {\r\n                                field: 'kills',\r\n                                sort: 'desc',\r\n                            },\r\n                        ]}\r\n                        autoPageSize />\r\n                </div>\r\n            }\r\n            {loading &&\r\n                <Dimmer active>\r\n                    <Loader inverted>Loading</Loader>\r\n                </Dimmer>\r\n            }\r\n        </Container>\r\n    );\r\n}\r\nexport default Leaderboard;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Table, Container, Dimmer, Loader, Header } from 'semantic-ui-react'\r\n\r\nfunction ServerStatus() {\r\n  const [serverInfo, setServerInfo] = useState(undefined);\r\n  const [playerList, setPlayerList] = useState(undefined);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetchServerData();\r\n  }, []);\r\n\r\n  const fetchServerData = () => {\r\n    setLoading(true);\r\n    fetch('https://pavlov-web-scoreboard.herokuapp.com/api/server').then(res => res.json())\r\n      .then(data => {\r\n        setServerInfo(data[\"ServerInfo\"]);\r\n        setPlayerList(data[\"Scores\"]);\r\n        setLoading(false);\r\n      });\r\n  }\r\n\r\n\r\n  const renderPlayerRows = () => {\r\n    return playerList.map(p => {\r\n      let player = p[\"PlayerInfo\"];\r\n      let kda = player[\"KDA\"].split(\"/\");\r\n      return (\r\n        <Table.Row>\r\n          <Table.Cell>{player[\"PlayerName\"]}</Table.Cell>\r\n          <Table.Cell>{kda[0]}</Table.Cell>\r\n          <Table.Cell>{kda[1]}</Table.Cell>\r\n          <Table.Cell>{kda[2]}</Table.Cell>\r\n        </Table.Row>\r\n      )\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n        {serverInfo && !loading &&\r\n          <div className=\"serverinfo\">\r\n            <Header as='h2'>{serverInfo[\"ServerName\"]}</Header>\r\n            <p>Map: {serverInfo[\"MapLabel\"]}</p>\r\n            <p>Mode: {serverInfo[\"GameMode\"]}</p>\r\n            <p>Players: {serverInfo[\"PlayerCount\"]}</p>\r\n            {!playerList &&\r\n              <Header as='h4'>No current players</Header>\r\n            }\r\n            {playerList &&\r\n              <Table celled>\r\n                <Table.Header>\r\n                  <Table.Row>\r\n                    <Table.HeaderCell>Player</Table.HeaderCell>\r\n                    <Table.HeaderCell>Kills</Table.HeaderCell>\r\n                    <Table.HeaderCell>Deaths</Table.HeaderCell>\r\n                    <Table.HeaderCell>Score</Table.HeaderCell>\r\n                  </Table.Row>\r\n                </Table.Header>\r\n                <Table.Body>\r\n                  {renderPlayerRows()}\r\n                </Table.Body>\r\n              </Table>}\r\n          </div>\r\n}\r\n        {loading &&\r\n          <Dimmer active>\r\n            <Loader inverted>Loading</Loader>\r\n          </Dimmer>\r\n        }\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default ServerStatus;\r\n","import React from 'react';\nimport './App.css';\nimport \"semantic-ui-css/semantic.min.css\";\nimport Leaderboard from './Leaderboard';\nimport ServerStatus from './ServerStatus';\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport { Container, Header } from 'semantic-ui-react';\n\nfunction App() {\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Drawer\n          variant=\"permanent\"\n          anchor=\"left\"\n        >\n          <List>\n            <ListItem button>\n              <Link to=\"/~\">\n                <ListItemText primary={\"Home\"} />\n              </Link>\n            </ListItem>\n            <ListItem button>\n              <Link to=\"/server\">\n                <ListItemText primary={\"Server Status\"} />\n              </Link>\n            </ListItem>\n            <ListItem button>\n              <Link to=\"/leaderboard\">\n                <ListItemText primary={\"Leaderboard\"} />\n              </Link>\n            </ListItem>\n          </List>\n        </Drawer>\n        <Switch>\n          <Route path=\"/leaderboard\">\n            <Leaderboard />\n          </Route>\n          <Route path=\"/server\">\n            <ServerStatus />\n          </Route>\n          <Route path=\"/\">\n            <Container>\n              <Header as='h2'>VR-Together Pavlov</Header>\n            </Container>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n\n\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}